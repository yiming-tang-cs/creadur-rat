<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.7 (for help'mojo with additional elements)-->

<plugin>
  <name>Apache Creadur Rat::Plugin4Maven</name>
  <description>A plugin for Apache Maven that runs Apache Rat
   to audit the source to be distributed.</description>
  <groupId>org.apache.rat</groupId>
  <artifactId>apache-rat-plugin</artifactId>
  <version>0.16-SNAPSHOT</version>
  <goalPrefix>apache-rat</goalPrefix>
  <mojos>
    <mojo>
      <goal>check</goal>
      <description>Run Rat to perform a violation check.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>validate</phase>
      <implementation>org.apache.rat.mp.RatCheckMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addDefaultLicenseMatchers</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to add the default list of license matchers.</description>
        </parameter>
        <parameter>
          <name>addLicenseHeaders</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to add license headers; possible values are forced, true, and false (default).</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The base directory, in which to search for files.</description>
        </parameter>
        <parameter>
          <name>consoleOutput</name>
          <type>boolean</type>
          <since>0.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to output the names of files that have unapproved licenses to the console. Defaults to true to ease builds in containers where you are unable to access rat.txt easily.</description>
        </parameter>
        <parameter>
          <name>copyrightMessage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Copyright message to add to license headers. This option is ignored, unless addLicenseHeaders is set to true, or forced.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies files, which are excluded in the report. By default, no files are excluded.</description>
        </parameter>
        <parameter>
          <name>excludesFile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies a file, from which to read excludes. Basically, an alternative to specifying the excludes as a list. The excludesFile is assumed to be using the UFT8 character set.</description>
        </parameter>
        <parameter>
          <name>excludesFileCharset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the include files character set. Defaults to @code{${project.build.sourceEncoding}), or @code{UTF8}.</description>
        </parameter>
        <parameter>
          <name>excludeSubProjects</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to exclude subprojects. This is recommended, if you want a separate apache-rat-plugin report for each subproject.</description>
        </parameter>
        <parameter>
          <name>ignoreErrors</name>
          <type>boolean</type>
          <since>0.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>Will ignore rat errors and display a log message if any. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies files, which are included in the report. By default, all files are included.</description>
        </parameter>
        <parameter>
          <name>includesFile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies a file, from which to read includes. Basically, an alternative to specifying the includes as a list.</description>
        </parameter>
        <parameter>
          <name>includesFileCharset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the include files character set. Defaults to @code{${project.build.sourceEncoding}), or @code{UTF8}.</description>
        </parameter>
        <parameter>
          <name>licenseFamilies</name>
          <type>org.apache.rat.license.ILicenseFamily[]</type>
          <since>0.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the license families to accept.</description>
        </parameter>
        <parameter>
          <name>licenseMatchers</name>
          <type>org.apache.rat.mp.HeaderMatcherSpecification[]</type>
          <deprecated>Use licenses instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the licenses to accept. Deprecated, use licenses instead.</description>
        </parameter>
        <parameter>
          <name>licenses</name>
          <type>org.apache.rat.analysis.IHeaderMatcher[]</type>
          <since>0.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the licenses to accept. By default, these are added to the default licenses, unless you set addDefaultLicenseMatchers to false.</description>
        </parameter>
        <parameter>
          <name>numUnapprovedLicenses</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Maximum number of files with unapproved licenses.</description>
        </parameter>
        <parameter>
          <name>parseSCMIgnoresAsExcludes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to parse source code management system (SCM) ignore files and use their contents as excludes. At the moment this works for the following SCMs:
See also: org.apache.rat.config.SourceCodeManagementSystems</description>
        </parameter>
        <parameter>
          <name>reportFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Where to store the report.</description>
        </parameter>
        <parameter>
          <name>reportStyle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output style of the report. Use &quot;plain&quot; (the default) for a plain text report or &quot;xml&quot; for the raw XML report. Alternatively you can give the path of an XSL transformation that will be applied on the raw XML to produce the report written to the output file.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>0.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>Will skip the plugin execution, e.g. for technical builds that do not take license compliance into account.</description>
        </parameter>
        <parameter>
          <name>useDefaultExcludes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use the default excludes when scanning for files. The default excludes are: 
* meta data files for source code management / revision control systems, see org.apache.rat.config.SourceCodeManagementSystems 
* temporary files used by Maven, see useMavenDefaultExcludes 
* configuration files for Eclipse, see useEclipseDefaultExcludes 
* configuration files for IDEA, see useIdeaDefaultExcludes </description>
        </parameter>
        <parameter>
          <name>useEclipseDefaultExcludes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use the Eclipse specific default excludes when scanning for files. Eclipse specific default excludes are given by the constant ECLIPSE_DEFAULT_EXCLUDES: The .classpath and .project files, the .settings directory, and so on.</description>
        </parameter>
        <parameter>
          <name>useIdeaDefaultExcludes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use the IDEA specific default excludes when scanning for files. IDEA specific default excludes are given by the constant IDEA_DEFAULT_EXCLUDES: The *.iml, *.ipr and *.iws files and the .idea directory.</description>
        </parameter>
        <parameter>
          <name>useMavenDefaultExcludes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use the Maven specific default excludes when scanning for files. Maven specific default excludes are given by the constant MAVEN_DEFAULT_EXCLUDES: The target directory, the cobertura.ser file, and so on.</description>
        </parameter>
      </parameters>
      <configuration>
        <addDefaultLicenseMatchers implementation="boolean" default-value="true">${rat.addDefaultLicenseMatchers}</addDefaultLicenseMatchers>
        <addLicenseHeaders implementation="java.lang.String" default-value="false">${rat.addLicenseHeaders}</addLicenseHeaders>
        <basedir implementation="java.io.File" default-value="${basedir}">${rat.basedir}</basedir>
        <consoleOutput implementation="boolean" default-value="true">${rat.consoleOutput}</consoleOutput>
        <copyrightMessage implementation="java.lang.String">${rat.copyrightMessage}</copyrightMessage>
        <excludesFile implementation="java.lang.String">${rat.excludesFile}</excludesFile>
        <excludesFileCharset implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${rat.excludesFileCharset}</excludesFileCharset>
        <excludeSubProjects implementation="boolean" default-value="true">${rat.excludeSubprojects}</excludeSubProjects>
        <ignoreErrors implementation="boolean" default-value="false">${rat.ignoreErrors}</ignoreErrors>
        <includesFile implementation="java.lang.String">${rat.includesFile}</includesFile>
        <includesFileCharset implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${rat.includesFileCharset}</includesFileCharset>
        <numUnapprovedLicenses implementation="int" default-value="0">${rat.numUnapprovedLicenses}</numUnapprovedLicenses>
        <parseSCMIgnoresAsExcludes implementation="boolean" default-value="true">${rat.parseSCMIgnoresAsExcludes}</parseSCMIgnoresAsExcludes>
        <reportFile implementation="java.io.File" default-value="${project.build.directory}/rat.txt">${rat.outputFile}</reportFile>
        <reportStyle implementation="java.lang.String" default-value="plain">${rat.outputStyle}</reportStyle>
        <skip implementation="boolean" default-value="false">${rat.skip}</skip>
        <useDefaultExcludes implementation="boolean" default-value="true">${rat.useDefaultExcludes}</useDefaultExcludes>
        <useEclipseDefaultExcludes implementation="boolean" default-value="true">${rat.useEclipseDefaultExcludes}</useEclipseDefaultExcludes>
        <useIdeaDefaultExcludes implementation="boolean" default-value="true">${rat.useIdeaDefaultExcludes}</useIdeaDefaultExcludes>
        <useMavenDefaultExcludes implementation="boolean" default-value="true">${rat.useMavenDefaultExcludes}</useMavenDefaultExcludes>
      </configuration>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on apache-rat-plugin.
Call mvn apache-rat:help -Ddetail=true -Dgoal=&lt;goal-name&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.rat.apache_rat_plugin.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>rat</goal>
      <description>Generates a report with Rat&apos;s output.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.apache.rat.mp.RatReportMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addDefaultLicenseMatchers</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to add the default list of license matchers.</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description>The base directory, in which to search for files.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies files, which are excluded in the report. By default, no files are excluded.</description>
        </parameter>
        <parameter>
          <name>excludesFile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies a file, from which to read excludes. Basically, an alternative to specifying the excludes as a list. The excludesFile is assumed to be using the UFT8 character set.</description>
        </parameter>
        <parameter>
          <name>excludesFileCharset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the include files character set. Defaults to @code{${project.build.sourceEncoding}), or @code{UTF8}.</description>
        </parameter>
        <parameter>
          <name>excludeSubProjects</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to exclude subprojects. This is recommended, if you want a separate apache-rat-plugin report for each subproject.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies files, which are included in the report. By default, all files are included.</description>
        </parameter>
        <parameter>
          <name>includesFile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies a file, from which to read includes. Basically, an alternative to specifying the includes as a list.</description>
        </parameter>
        <parameter>
          <name>includesFileCharset</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the include files character set. Defaults to @code{${project.build.sourceEncoding}), or @code{UTF8}.</description>
        </parameter>
        <parameter>
          <name>licenseFamilies</name>
          <type>org.apache.rat.license.ILicenseFamily[]</type>
          <since>0.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the license families to accept.</description>
        </parameter>
        <parameter>
          <name>licenseMatchers</name>
          <type>org.apache.rat.mp.HeaderMatcherSpecification[]</type>
          <deprecated>Use licenses instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the licenses to accept. Deprecated, use licenses instead.</description>
        </parameter>
        <parameter>
          <name>licenses</name>
          <type>org.apache.rat.analysis.IHeaderMatcher[]</type>
          <since>0.8</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the licenses to accept. By default, these are added to the default licenses, unless you set addDefaultLicenseMatchers to false.</description>
        </parameter>
        <parameter>
          <name>parseSCMIgnoresAsExcludes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to parse source code management system (SCM) ignore files and use their contents as excludes. At the moment this works for the following SCMs:
See also: org.apache.rat.config.SourceCodeManagementSystems</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <since>0.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>Will skip the plugin execution, e.g. for technical builds that do not take license compliance into account.</description>
        </parameter>
        <parameter>
          <name>useDefaultExcludes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use the default excludes when scanning for files. The default excludes are: 
* meta data files for source code management / revision control systems, see org.apache.rat.config.SourceCodeManagementSystems 
* temporary files used by Maven, see useMavenDefaultExcludes 
* configuration files for Eclipse, see useEclipseDefaultExcludes 
* configuration files for IDEA, see useIdeaDefaultExcludes </description>
        </parameter>
        <parameter>
          <name>useEclipseDefaultExcludes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use the Eclipse specific default excludes when scanning for files. Eclipse specific default excludes are given by the constant ECLIPSE_DEFAULT_EXCLUDES: The .classpath and .project files, the .settings directory, and so on.</description>
        </parameter>
        <parameter>
          <name>useIdeaDefaultExcludes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use the IDEA specific default excludes when scanning for files. IDEA specific default excludes are given by the constant IDEA_DEFAULT_EXCLUDES: The *.iml, *.ipr and *.iws files and the .idea directory.</description>
        </parameter>
        <parameter>
          <name>useMavenDefaultExcludes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to use the Maven specific default excludes when scanning for files. Maven specific default excludes are given by the constant MAVEN_DEFAULT_EXCLUDES: The target directory, the cobertura.ser file, and so on.</description>
        </parameter>
      </parameters>
      <configuration>
        <addDefaultLicenseMatchers implementation="boolean" default-value="true">${rat.addDefaultLicenseMatchers}</addDefaultLicenseMatchers>
        <basedir implementation="java.io.File" default-value="${basedir}">${rat.basedir}</basedir>
        <excludesFile implementation="java.lang.String">${rat.excludesFile}</excludesFile>
        <excludesFileCharset implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${rat.excludesFileCharset}</excludesFileCharset>
        <excludeSubProjects implementation="boolean" default-value="true">${rat.excludeSubprojects}</excludeSubProjects>
        <includesFile implementation="java.lang.String">${rat.includesFile}</includesFile>
        <includesFileCharset implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${rat.includesFileCharset}</includesFileCharset>
        <parseSCMIgnoresAsExcludes implementation="boolean" default-value="true">${rat.parseSCMIgnoresAsExcludes}</parseSCMIgnoresAsExcludes>
        <skip implementation="boolean" default-value="false">${rat.skip}</skip>
        <useDefaultExcludes implementation="boolean" default-value="true">${rat.useDefaultExcludes}</useDefaultExcludes>
        <useEclipseDefaultExcludes implementation="boolean" default-value="true">${rat.useEclipseDefaultExcludes}</useEclipseDefaultExcludes>
        <useIdeaDefaultExcludes implementation="boolean" default-value="true">${rat.useIdeaDefaultExcludes}</useIdeaDefaultExcludes>
        <useMavenDefaultExcludes implementation="boolean" default-value="true">${rat.useMavenDefaultExcludes}</useMavenDefaultExcludes>
      </configuration>
    </mojo>
  </mojos>
</plugin>